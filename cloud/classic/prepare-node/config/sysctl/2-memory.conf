#------------------------------------------------------------------------------#
#                           MEMORY SUBSYSTEM OPTIONS                           #
#------------------------------------------------------------------------------#

# If we have lots of memory we will avoid using swap.
# We want swappiness to be as close to zero as possible.
vm.swappiness = 1

# Tell Linux that we want it to prefer inode/dentry cache to other caches.
# Higher priority to inode caching helps to avoid disk seeks for inode loading.
vm.vfs_cache_pressure = 50

# To avoid long IO stalls for write cache in a real life situation with
# different workloads we typically want to limit the kernel dirty cache size.
# Rule of thumb: <dirty_background_ratio> = 1/4 to 1/2 of the <dirty_ratio>.
vm.dirty_background_ratio = 5
vm.dirty_ratio = 10

# Set the 50% of available memory overcommit policy.
vm.overcommit_ratio = 50
# vm.overcommit_memory = 0

# But if you run out of memory use next settings that don't do overcommit and
# the total address space will be <swap>+<ram>*<overcommit_ratio>/100.
# vm.overcommit_ratio = 100
# vm.overcommit_memory = 2
# And more. If you run Docker or Redis and have some memory troubles try this:
# vm.overcommit_ratio = 50
vm.overcommit_memory = 1

# Specifies the minimum virtual address that a process is allowed to mmap.
# It avoids "kernel NULL pointer dereference" defects.
vm.mmap_min_addr = 4096

# Keep at least 128MB of free RAM space available. When set to its default
# value it is possible to encounter memory exhaustion symptoms when free memory
# should, in fact, be available. Setting <vm.min_free_kbytes> to 5-6% of the
# total physical memory but no more than 2GB can prevent this problem.
vm.min_free_kbytes = 22528

# RED HAT DOES NOT RECOMMEND TUNNING THIS PARAMETER!
# Specifies the number of centiseconds (hundredths of a second) dirty data
# remains in the page cache before it is eligible to be written back to disk.
# vm.dirty_expire_centisecs = 6000

# RED HAT DOES NOT RECOMMEND TUNNING THIS PARAMETER!
# Specifies the length of the interval between kernel flusher threads waking
# and writing eligible data to disk.
# vm.dirty_writeback_centisecs = 6000
